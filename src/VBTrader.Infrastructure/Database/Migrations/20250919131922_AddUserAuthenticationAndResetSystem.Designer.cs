// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VBTrader.Infrastructure.Database;

#nullable disable

namespace VBTrader.Infrastructure.Database.Migrations
{
    [DbContext(typeof(VBTraderDbContext))]
    [Migration("20250919131922_AddUserAuthenticationAndResetSystem")]
    partial class AddUserAuthenticationAndResetSystem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VBTrader.Core.Models.CredentialResetRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RequestId"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("PreserveLiveData")
                        .HasColumnType("boolean");

                    b.Property<bool>("PreserveSandboxData")
                        .HasColumnType("boolean");

                    b.Property<bool>("PreserveTradingHistory")
                        .HasColumnType("boolean");

                    b.Property<string>("RequestIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("ResetReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ResetToken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ResetType")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("RequestId");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_CredentialResetRequests_ExpiresAt");

                    b.HasIndex("ResetToken")
                        .IsUnique()
                        .HasDatabaseName("IX_CredentialResetRequests_ResetToken");

                    b.HasIndex("UserId", "IsCompleted")
                        .HasDatabaseName("IX_CredentialResetRequests_UserId_IsCompleted");

                    b.ToTable("credential_reset_requests", (string)null);
                });

            modelBuilder.Entity("VBTrader.Core.Models.PasswordResetToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TokenId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("RequestIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("TokenId");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_PasswordResetTokens_ExpiresAt");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("IX_PasswordResetTokens_Token");

                    b.HasIndex("UserId", "IsUsed")
                        .HasDatabaseName("IX_PasswordResetTokens_UserId_IsUsed");

                    b.ToTable("password_reset_tokens", (string)null);
                });

            modelBuilder.Entity("VBTrader.Core.Models.TradeRecord", b =>
                {
                    b.Property<int>("TradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TradeId"));

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExecutedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("HistoricalDataTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("OrderId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<decimal>("TotalValue")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("TradingMode")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("TradeId");

                    b.HasIndex("Symbol", "ExecutedAt")
                        .HasDatabaseName("IX_TradeRecords_Symbol_ExecutedAt");

                    b.HasIndex("TradingMode", "ExecutedAt")
                        .HasDatabaseName("IX_TradeRecords_TradingMode_ExecutedAt");

                    b.HasIndex("UserId", "ExecutedAt")
                        .HasDatabaseName("IX_TradeRecords_UserId_ExecutedAt");

                    b.ToTable("trade_records", (string)null);
                });

            modelBuilder.Entity("VBTrader.Core.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Username");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("VBTrader.Core.Models.UserAccountBackup", b =>
                {
                    b.Property<int>("BackupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BackupId"));

                    b.Property<string>("BackupData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BackupReason")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("BackupId");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_UserAccountBackups_ExpiresAt");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserAccountBackups_UserId");

                    b.HasIndex("BackupReason", "CreatedAt")
                        .HasDatabaseName("IX_UserAccountBackups_BackupReason_CreatedAt");

                    b.ToTable("user_account_backups", (string)null);
                });

            modelBuilder.Entity("VBTrader.Core.Models.UserCredentials", b =>
                {
                    b.Property<int>("CredentialsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CredentialsId"));

                    b.Property<string>("CallbackUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EncryptedSchwabAppKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EncryptedSchwabAppSecret")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EncryptionSalt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("CredentialsId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserCredentials_UserId");

                    b.ToTable("user_credentials", (string)null);
                });

            modelBuilder.Entity("VBTrader.Core.Models.UserSession", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SessionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TradingMode")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("SessionId");

                    b.HasIndex("SessionToken")
                        .IsUnique()
                        .HasDatabaseName("IX_UserSessions_SessionToken");

                    b.HasIndex("UserId", "IsActive")
                        .HasDatabaseName("IX_UserSessions_UserId_IsActive");

                    b.ToTable("user_sessions", (string)null);
                });

            modelBuilder.Entity("VBTrader.Infrastructure.Database.Entities.CandlestickDataEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("BollingerLower")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BollingerMiddle")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BollingerUpper")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Close")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("EMA12")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal?>("EMA26")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal>("High")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal>("Low")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal?>("MACD")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal?>("MACDHistogram")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal?>("MACDSignal")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal>("Open")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal?>("RSI")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("TimeFrameMinutes")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_CandlestickData_Timestamp");

                    b.HasIndex("Symbol", "Timestamp")
                        .HasDatabaseName("IX_CandlestickData_Symbol_Timestamp");

                    b.ToTable("candlestick_data", (string)null);
                });

            modelBuilder.Entity("VBTrader.Infrastructure.Database.Entities.MarketOpportunityEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Confidence")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NewsSentiment")
                        .HasColumnType("integer");

                    b.Property<int>("OpportunityType")
                        .HasColumnType("integer");

                    b.Property<decimal>("PriceChangePercent")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<string>("Reason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("Score")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("VolumeChange")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("Score")
                        .HasDatabaseName("IX_MarketOpportunities_Score");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_MarketOpportunities_Timestamp");

                    b.HasIndex("Symbol", "Timestamp")
                        .HasDatabaseName("IX_MarketOpportunities_Symbol_Timestamp");

                    b.ToTable("market_opportunities", (string)null);
                });

            modelBuilder.Entity("VBTrader.Infrastructure.Database.Entities.StockQuoteEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Ask")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal>("Bid")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal>("Change")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal>("ChangePercent")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("High")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<bool>("IsPreMarket")
                        .HasColumnType("boolean");

                    b.Property<decimal>("LastPrice")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal>("Low")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal>("MarketCap")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("NewsHeadline")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("NewsRating")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("NewsTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Open")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal>("PreMarketChangePercent")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal>("PreviousClose")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<float>("SharesFloat")
                        .HasColumnType("real");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_StockQuotes_Timestamp");

                    b.HasIndex("IsPreMarket", "Timestamp")
                        .HasDatabaseName("IX_StockQuotes_IsPreMarket_Timestamp");

                    b.HasIndex("Symbol", "Timestamp")
                        .HasDatabaseName("IX_StockQuotes_Symbol_Timestamp");

                    b.ToTable("stock_quotes", (string)null);
                });

            modelBuilder.Entity("VBTrader.Infrastructure.Database.Entities.TradingSessionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("AverageResponseTimeMs")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DataQualityScore")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FailedApiCalls")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAfterHoursSession")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMarketHoursSession")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPreMarketSession")
                        .HasColumnType("boolean");

                    b.Property<int>("MissedUpdates")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("SessionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalActiveSymbols")
                        .HasColumnType("integer");

                    b.Property<int>("TotalApiCalls")
                        .HasColumnType("integer");

                    b.Property<int>("TotalOpportunitiesFound")
                        .HasColumnType("integer");

                    b.Property<int>("TotalQuotesProcessed")
                        .HasColumnType("integer");

                    b.Property<int>("TotalSymbolsWatched")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SessionDate")
                        .HasDatabaseName("IX_TradingSessions_SessionDate");

                    b.ToTable("trading_sessions", (string)null);
                });

            modelBuilder.Entity("VBTrader.Core.Models.CredentialResetRequest", b =>
                {
                    b.HasOne("VBTrader.Core.Models.User", "User")
                        .WithMany("CredentialResetRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VBTrader.Core.Models.PasswordResetToken", b =>
                {
                    b.HasOne("VBTrader.Core.Models.User", "User")
                        .WithMany("PasswordResetTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VBTrader.Core.Models.TradeRecord", b =>
                {
                    b.HasOne("VBTrader.Core.Models.User", "User")
                        .WithMany("TradeRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VBTrader.Core.Models.UserAccountBackup", b =>
                {
                    b.HasOne("VBTrader.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VBTrader.Core.Models.UserCredentials", b =>
                {
                    b.HasOne("VBTrader.Core.Models.User", "User")
                        .WithOne("SchwabCredentials")
                        .HasForeignKey("VBTrader.Core.Models.UserCredentials", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VBTrader.Core.Models.UserSession", b =>
                {
                    b.HasOne("VBTrader.Core.Models.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VBTrader.Core.Models.User", b =>
                {
                    b.Navigation("CredentialResetRequests");

                    b.Navigation("PasswordResetTokens");

                    b.Navigation("SchwabCredentials");

                    b.Navigation("Sessions");

                    b.Navigation("TradeRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
